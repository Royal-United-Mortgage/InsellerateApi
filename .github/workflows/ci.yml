name: CI
on:
  push:
    branches: [ master ]

env:
  DOTNET_VERSION: '8.0.x'
  PACKAGE_PATH: 'InsellerateApi'
  CONFIGURATION: Release

permissions:
  contents: write  # for pushing bump commits

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      publish_direct: ${{ steps.decide.outputs.publish_direct }}
      compare_api:    ${{ steps.decide.outputs.compare_api }}
      remote_version: ${{ steps.get_remote.outputs.remote }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          fetch-depth: 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Extract local version
        id: get_local
        run: |
          LOCAL=$(grep -oPm1 '(?<=<Version>)[^<]+' ${{ env.PACKAGE_PATH }}/InsellerateApi.csproj)
          echo "local=$LOCAL" >> $GITHUB_OUTPUT

      - name: Get latest remote version
        id: get_remote
        run: |
          # List all versions, pick the highest
          VERSIONS=$(dotnet nuget list package InsellerateApi \
            --source "https://nuget.pkg.github.com/Royal-United-Mortgage/index.json" \
            --include-prerelease --verbosity quiet \
            | awk '{print $2}')
          REMOTE=$(printf "%s\n" $VERSIONS | sort -V | tail -n1)
          echo "remote=$REMOTE" >> $GITHUB_OUTPUT

      - name: Decide publish strategy
        id: decide
        run: |
          echo "Local: ${{ steps.get_local.outputs.local }}, Remote: ${{ steps.get_remote.outputs.remote }}"
          if dpkg --compare-versions ${{ steps.get_local.outputs.local }} gt ${{ steps.get_remote.outputs.remote }}; then
            echo "publish_direct=true" >> $GITHUB_OUTPUT
            echo "compare_api=false"  >> $GITHUB_OUTPUT
          else
            echo "publish_direct=false" >> $GITHUB_OUTPUT
            echo "compare_api=true"    >> $GITHUB_OUTPUT
          fi

  publish-direct:
    needs: prepare
    if: needs.prepare.outputs.publish_direct == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.PACKAGE_PATH }}

      - name: Build
        run: dotnet build -c ${{ env.CONFIGURATION }} --no-restore ${{ env.PACKAGE_PATH }}

      - name: Pack
        run: dotnet pack -c ${{ env.CONFIGURATION }} --no-build ${{ env.PACKAGE_PATH }}

      - name: Publish to GitHub Packages
        run: |
          dotnet nuget push \
            "${{ env.PACKAGE_PATH }}/bin/${{ env.CONFIGURATION }}/*.nupkg" \
            --source "https://nuget.pkg.github.com/Royal-United-Mortgage/index.json" \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate

  check-api-and-publish:
    needs: prepare
    if: needs.prepare.outputs.compare_api == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install ApiCompat tool
        run: dotnet tool install --global Microsoft.DotNet.ApiCompat.Tool

      - name: Restore dependencies
        run: dotnet restore ${{ env.PACKAGE_PATH }}

      - name: Build library
        run: dotnet build -c ${{ env.CONFIGURATION }} --no-restore ${{ env.PACKAGE_PATH }}

      - name: Compare public API vs published
        id: diff
        continue-on-error: true
        run: |
          apicompat \
            --baseline ~/.nuget/packages/insellerateapi/${{ needs.prepare.outputs.remote_version }}/lib/net8.0/InsellerateApi.dll \
            --target   ${{ env.PACKAGE_PATH }}/bin/${{ env.CONFIGURATION }}/net8.0/InsellerateApi.dll

      - name: Bump version if API changed
        if: steps.diff.outcome == 'failure'
        run: |
          OLD=${{ needs.prepare.outputs.remote_version }}
          IFS='.' read -r MAJ MIN PATCH <<< "$OLD"
          NEW="$MAJ.$MIN.$((PATCH+1))"
          sed -i "s|<Version>.*</Version>|<Version>$NEW</Version>|" ${{ env.PACKAGE_PATH }}/InsellerateApi.csproj
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.PACKAGE_PATH }}/InsellerateApi.csproj
          git commit -m "ci: bump NuGet version to $NEW" 
          git push

      - name: Pack (if version was bumped)
        if: steps.diff.outcome == 'failure'
        run: dotnet pack -c ${{ env.CONFIGURATION }} --no-build ${{ env.PACKAGE_PATH }}

      - name: Publish to GitHub Packages
        run: |
          dotnet nuget push \
            "${{ env.PACKAGE_PATH }}/bin/${{ env.CONFIGURATION }}/*.nupkg" \
            --source "https://nuget.pkg.github.com/Royal-United-Mortgage/index.json" \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate
