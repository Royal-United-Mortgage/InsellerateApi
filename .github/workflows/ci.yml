name: CI
on:
  push:
    branches: [ master ]

env:
  DOTNET_VERSION: '8.0.x'
  PACKAGE_PATH: 'InsellerateApi'

permissions:
  contents: write
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Get current version
        id: version
        run: |
          CURRENT=$(grep -oP '(?<=<Version>)[^<]+' ${{ env.PACKAGE_PATH }}/InsellerateApi.csproj)
          echo "current=$CURRENT" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT"

      - name: Restore and build
        run: |
          dotnet restore ${{ env.PACKAGE_PATH }}
          dotnet build -c Release --no-restore ${{ env.PACKAGE_PATH }}

      - name: Check if API changed
        id: api_check
        continue-on-error: true
        run: |
          # Install API comparison tool
          dotnet tool install --global Microsoft.DotNet.ApiCompat.Tool
          
          # Try to download and compare with latest published version
          LATEST=$(dotnet nuget list package InsellerateApi \
            --source "https://nuget.pkg.github.com/Royal-United-Mortgage/index.json" \
            --verbosity quiet | awk 'NR==2{print $2}' || echo "none")
          
          echo "Latest published: $LATEST"
          
          if [ "$LATEST" = "none" ] || [ -z "$LATEST" ]; then
            echo "No published version found - will publish current"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "Comparing with version $LATEST"
            if apicompat \
              --baseline ~/.nuget/packages/insellerateapi/$LATEST/lib/net8.0/InsellerateApi.dll \
              --target ${{ env.PACKAGE_PATH }}/bin/Release/net8.0/InsellerateApi.dll; then
              echo "API unchanged"
              echo "changed=false" >> $GITHUB_OUTPUT
            else
              echo "API changed"
              echo "changed=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version if needed
        if: steps.api_check.outputs.changed == 'true'
        run: |
          # Simple version bump
          CURRENT="${{ steps.version.outputs.current }}"
          
          # Parse version or default to 1.0.0
          if echo "$CURRENT" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            MAJOR=$(echo "$CURRENT" | cut -d. -f1)
            MINOR=$(echo "$CURRENT" | cut -d. -f2)
            PATCH=$(echo "$CURRENT" | cut -d. -f3)
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          else
            echo "Invalid version format, setting to 1.0.1"
            NEW_VERSION="1.0.1"
          fi
          
          echo "Bumping version to: $NEW_VERSION"
          sed -i "s|<Version>.*</Version>|<Version>$NEW_VERSION</Version>|" ${{ env.PACKAGE_PATH }}/InsellerateApi.csproj
          
          # Commit version bump
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.PACKAGE_PATH }}/InsellerateApi.csproj
          git commit -m "Bump version to $NEW_VERSION"
          git push

      - name: Pack and publish
        if: steps.api_check.outputs.changed == 'true'
        run: |
          # Pack the project
          dotnet pack -c Release --no-build ${{ env.PACKAGE_PATH }}
          
          # Publish to GitHub Packages with proper authentication
          dotnet nuget add source \
            --username ${{ github.actor }} \
            --password ${{ secrets.GITHUB_TOKEN }} \
            --store-password-in-clear-text \
            --name github \
            "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
          
          dotnet nuget push \
            "${{ env.PACKAGE_PATH }}/bin/Release/*.nupkg" \
            --source github \
            --skip-duplicate

      - name: Skip message
        if: steps.api_check.outputs.changed == 'false'
        run: echo "No API changes detected - skipping publish"
